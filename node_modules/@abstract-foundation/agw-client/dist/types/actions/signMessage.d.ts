import { type Account, type Client, type Hex, type SignMessageParameters, type Transport, type WalletClient } from 'viem';
import type { ChainEIP712 } from 'viem/chains';
/**
 * Function to sign messages using the connected Abstract Global Wallet.
 *
 * This method follows the EIP-1271 standard for contract signature verification.
 *
 * @example
 * ```tsx
 * import { useAbstractClient } from "@abstract-foundation/agw-react";
 *
 * export default function SignMessage() {
 *   const { data: agwClient } = useAbstractClient();
 *
 *   async function signMessage() {
 *     if (!agwClient) return;
 *
 *     const signature = await agwClient.signMessage({
 *       message: "Hello, Abstract!",
 *     });
 *
 *     console.log("Signature:", signature);
 *   }
 * }
 * ```
 *
 * @param parameters - Parameters for signing a message
 * @param parameters.message - The message to sign. Can be a string or a hex value (required)
 * @returns A Promise containing the signature of the message
 */
export declare function signMessage(client: Client<Transport, ChainEIP712, Account>, signerClient: WalletClient<Transport, ChainEIP712, Account>, parameters: Omit<SignMessageParameters, 'account'>, isPrivyCrossApp?: boolean): Promise<Hex>;
//# sourceMappingURL=signMessage.d.ts.map